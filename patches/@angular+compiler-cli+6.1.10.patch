diff --git a/node_modules/@angular/compiler-cli/src/transformers/compiler_host.js b/node_modules/@angular/compiler-cli/src/transformers/compiler_host.js
index 879d88a..0388bc3 100644
--- a/node_modules/@angular/compiler-cli/src/transformers/compiler_host.js
+++ b/node_modules/@angular/compiler-cli/src/transformers/compiler_host.js
@@ -127,12 +127,19 @@
         TsCompilerAotCompilerTypeCheckHostAdapter.prototype.resolveModuleName = function (moduleName, containingFile) {
             var rm = ts.resolveModuleName(moduleName, containingFile.replace(/\\/g, '/'), this.options, this, this.moduleResolutionCache)
                 .resolvedModule;
-            if (rm && this.isSourceFile(rm.resolvedFileName) && util_1.DTS.test(rm.resolvedFileName)) {
+            if (rm && this.isSourceFile(rm.resolvedFileName)) {
                 // Case: generateCodeForLibraries = true and moduleName is
                 // a .d.ts file in a node_modules folder.
                 // Need to set isExternalLibraryImport to false so that generated files for that file
                 // are emitted.
-                rm.isExternalLibraryImport = false;
+                if (util_1.DTS.test(rm.resolvedFileName)) {
+                    rm.isExternalLibraryImport = false;
+                } else if (rm.resolvedFileName.indexOf('@dps') > -1) {
+                    if (this.options.verbose) {
+                        console.debug("TsCompilerAotCompilerTypeCheckHostAdapter.prototype.resolveModuleName: changed behavior for @dps", rm.resolvedFileName);
+                    }
+                    rm.isExternalLibraryImport = false;
+                }
             }
             return rm;
         };
